This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  DAO/
    AppointmentDAO.java
    HashUtil.java
    TreatmentDAO.java
    UserDAO.java
  DBConnection/
    DBConnection.java
  GUI/
    CreateAppointmentDialog.java
    CreateOperationDialog.java
    CreatePrescriptionDialog.java
    DeleteAppointmentDialog.java
    DoctorWindow.java
    LoginPanel.java
    NurseWindow.java
    PatientWindow.java
    RegisterPatientDialog.java
    RescheduleAppointmentDialog.java
    SignUpDialog.java
  Library/
    Appointment.java
    Doctor.java
    Nurse.java
    Operation.java
    Patient.java
    Prescription.java
    Treatment.java
    User.java
  Main.java
.gitignore
database.sql
docker-compose.yml
docker.sh
Dockerfile
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/DAO/HashUtil.java">
package DAO;

import java.security.MessageDigest;

public class HashUtil {
    public static String sha256(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashed = md.digest(input.getBytes());

            StringBuilder sb = new StringBuilder();
            for (byte b : hashed)
                sb.append(String.format("%02x", b));
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("SHA-256 hashing error", e);
        }
    }
}
</file>

<file path="src/DAO/TreatmentDAO.java">
package DAO;

import DBConnection.DBConnection;
import Library.Operation;
import Library.Patient;
import Library.Prescription;
import Library.Treatment;

import java.sql.*;
import java.util.ArrayList;

public class TreatmentDAO {

    private UserDAO userDAO = new UserDAO();

    // Create a new operation
    public boolean createOperation(Operation operation, String patientSsn) {
        Connection conn = null;
        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // First, create the base treatment
            int treatmentId = createBaseTreatment(conn, operation.getStartDate(), operation.getEndDate(), "Operation");

            if (treatmentId == -1) {
                conn.rollback();
                return false;
            }

            // Now create the operation
            String operationSql = "INSERT INTO Operations (treatment_id, operationName) VALUES (?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(operationSql)) {
                pstmt.setInt(1, treatmentId);
                pstmt.setString(2, operation.getOperationName());
                pstmt.executeUpdate();
            }

            // Link to patient
            boolean linked = linkTreatmentToPatient(conn, treatmentId, patientSsn);

            if (!linked) {
                conn.rollback();
                return false;
            }

            conn.commit();
            return true;

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (SQLException rollbackEx) {
                System.err.println("Error during rollback: " + rollbackEx.getMessage());
            }

            System.err.println("Error creating operation: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException autoCommitEx) {
                System.err.println("Error resetting auto-commit: " + autoCommitEx.getMessage());
            }
        }
    }

    // Create a new prescription
    public boolean createPrescription(Prescription prescription, String patientSsn) {
        Connection conn = null;
        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // First, create the base treatment
            int treatmentId = createBaseTreatment(conn, prescription.getStartDate(), prescription.getEndDate(), "Prescription");

            if (treatmentId == -1) {
                conn.rollback();
                return false;
            }

            // Now create the prescription
            String prescriptionSql = "INSERT INTO Prescriptions (treatment_id, prescriptionID) VALUES (?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(prescriptionSql)) {
                pstmt.setInt(1, treatmentId);
                pstmt.setDouble(2, prescription.getPrescriptionID());
                pstmt.executeUpdate();
            }

            // Add medications
            ArrayList<String[]> medications = prescription.getMedication();
            String medicationSql = "INSERT INTO Medications (treatment_id, medicationName, dosage) VALUES (?, ?, ?)";

            try (PreparedStatement pstmt = conn.prepareStatement(medicationSql)) {
                for (String[] med : medications) {
                    pstmt.setInt(1, treatmentId);
                    pstmt.setString(2, med[0]); // medication name
                    pstmt.setString(3, med[1]); // dosage
                    pstmt.executeUpdate();
                }
            }

            // Link to patient
            boolean linked = linkTreatmentToPatient(conn, treatmentId, patientSsn);

            if (!linked) {
                conn.rollback();
                return false;
            }

            conn.commit();
            return true;

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (SQLException rollbackEx) {
                System.err.println("Error during rollback: " + rollbackEx.getMessage());
            }

            System.err.println("Error creating prescription: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException autoCommitEx) {
                System.err.println("Error resetting auto-commit: " + autoCommitEx.getMessage());
            }
        }
    }

    // Helper method to create base treatment and return its ID
    private int createBaseTreatment(Connection conn, String startDate, String endDate, String treatmentType) throws SQLException {
        String sql = "INSERT INTO Treatments (startDate, endDate, treatment_type) VALUES (?, ?, ?) RETURNING treatment_id";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setDate(1, Date.valueOf(startDate));

            if (endDate != null && !endDate.isEmpty()) {
                pstmt.setDate(2, Date.valueOf(endDate));
            } else {
                pstmt.setNull(2, Types.DATE);
            }

            pstmt.setString(3, treatmentType);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            } else {
                return -1;
            }
        }
    }

    // Helper method to link treatment to patient
    private boolean linkTreatmentToPatient(Connection conn, int treatmentId, String patientSsn) throws SQLException {
        String sql = "INSERT INTO PatientTreatments (patient_ssn, treatment_id) VALUES (?, ?)";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, patientSsn);
            pstmt.setInt(2, treatmentId);

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;
        }
    }

    // Get all operations for a patient
    public ArrayList<Operation> getOperationsByPatient(String patientSsn) {
        ArrayList<Operation> operations = new ArrayList<>();

        String sql = "SELECT t.treatment_id, t.startDate, t.endDate, o.operationName " +
                "FROM Treatments t " +
                "JOIN Operations o ON t.treatment_id = o.treatment_id " +
                "JOIN PatientTreatments pt ON t.treatment_id = pt.treatment_id " +
                "WHERE pt.patient_ssn = ? " +
                "ORDER BY t.startDate DESC";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, patientSsn);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String startDate = rs.getDate("startDate").toString();
                String endDate = rs.getDate("endDate") != null ? rs.getDate("endDate").toString() : null;
                String operationName = rs.getString("operationName");

                operations.add(new Operation(startDate, endDate, operationName));
            }

            return operations;

        } catch (SQLException e) {
            System.err.println("Error retrieving patient's operations: " + e.getMessage());
            e.printStackTrace();
            return operations;
        }
    }

    // Get all prescriptions for a patient
    public ArrayList<Prescription> getPrescriptionsByPatient(String patientSsn) {
        ArrayList<Prescription> prescriptions = new ArrayList<>();

        try (Connection conn = DBConnection.getConnection()) {
            // First, get the prescription base info
            String sql = "SELECT t.treatment_id, t.startDate, t.endDate, p.prescriptionID " +
                    "FROM Treatments t " +
                    "JOIN Prescriptions p ON t.treatment_id = p.treatment_id " +
                    "JOIN PatientTreatments pt ON t.treatment_id = pt.treatment_id " +
                    "WHERE pt.patient_ssn = ? " +
                    "ORDER BY t.startDate DESC";

            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, patientSsn);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    int treatmentId = rs.getInt("treatment_id");
                    String startDate = rs.getDate("startDate").toString();
                    String endDate = rs.getDate("endDate") != null ? rs.getDate("endDate").toString() : null;
                    double prescriptionID = rs.getDouble("prescriptionID");

                    // For each prescription, get its medications
                    ArrayList<String> medicationNames = new ArrayList<>();
                    ArrayList<String> dosages = new ArrayList<>();

                    String medSql = "SELECT medicationName, dosage FROM Medications WHERE treatment_id = ?";
                    try (PreparedStatement medStmt = conn.prepareStatement(medSql)) {
                        medStmt.setInt(1, treatmentId);
                        ResultSet medRs = medStmt.executeQuery();

                        while (medRs.next()) {
                            medicationNames.add(medRs.getString("medicationName"));
                            dosages.add(medRs.getString("dosage"));
                        }
                    }

                    prescriptions.add(new Prescription(startDate, endDate, prescriptionID, medicationNames, dosages));
                }
            }

            return prescriptions;

        } catch (SQLException e) {
            System.err.println("Error retrieving patient's prescriptions: " + e.getMessage());
            e.printStackTrace();
            return prescriptions;
        }
    }

    // Update treatment dates
    public boolean updateTreatmentDates(int treatmentId, String startDate, String endDate) {
        String sql = "UPDATE Treatments SET startDate = ?, endDate = ? WHERE treatment_id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setDate(1, Date.valueOf(startDate));

            if (endDate != null && !endDate.isEmpty()) {
                pstmt.setDate(2, Date.valueOf(endDate));
            } else {
                pstmt.setNull(2, Types.DATE);
            }

            pstmt.setInt(3, treatmentId);

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error updating treatment dates: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    // Get all treatments for a patient
    public ArrayList<Treatment> getAllTreatmentsByPatient(String patientSsn) {
        ArrayList<Treatment> treatments = new ArrayList<>();

        String sql = "SELECT t.treatment_id, t.startDate, t.endDate, t.treatment_type " +
                "FROM Treatments t " +
                "JOIN PatientTreatments pt ON t.treatment_id = pt.treatment_id " +
                "WHERE pt.patient_ssn = ? " +
                "ORDER BY t.startDate DESC";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, patientSsn);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int treatmentId = rs.getInt("treatment_id");
                String startDate = rs.getDate("startDate").toString();
                String endDate = rs.getDate("endDate") != null ? rs.getDate("endDate").toString() : null;
                String treatmentType = rs.getString("treatment_type");

                Treatment treatment = new Treatment();
                treatment.setStartDate(startDate);
                treatment.setEndDate(endDate);

                treatments.add(treatment);
            }

            return treatments;

        } catch (SQLException e) {
            System.err.println("Error retrieving patient's treatments: " + e.getMessage());
            e.printStackTrace();
            return treatments;
        }
    }

    // Delete a treatment
    public boolean deleteTreatment(int treatmentId) {
        Connection conn = null;
        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // First, find out the treatment type
            String typeSql = "SELECT treatment_type FROM Treatments WHERE treatment_id = ?";
            String treatmentType = null;

            try (PreparedStatement pstmt = conn.prepareStatement(typeSql)) {
                pstmt.setInt(1, treatmentId);
                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    treatmentType = rs.getString("treatment_type");
                } else {
                    // Treatment not found
                    conn.rollback();
                    return false;
                }
            }

            // Delete from specific treatment table first
            if ("Prescription".equals(treatmentType)) {
                // First delete from Medications
                String medSql = "DELETE FROM Medications WHERE treatment_id = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(medSql)) {
                    pstmt.setInt(1, treatmentId);
                    pstmt.executeUpdate();
                }

                // Then delete from Prescriptions
                String prescSql = "DELETE FROM Prescriptions WHERE treatment_id = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(prescSql)) {
                    pstmt.setInt(1, treatmentId);
                    pstmt.executeUpdate();
                }
            } else if ("Operation".equals(treatmentType)) {
                // Delete from Operations
                String opSql = "DELETE FROM Operations WHERE treatment_id = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(opSql)) {
                    pstmt.setInt(1, treatmentId);
                    pstmt.executeUpdate();
                }
            }

            // Delete from PatientTreatments
            String ptSql = "DELETE FROM PatientTreatments WHERE treatment_id = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(ptSql)) {
                pstmt.setInt(1, treatmentId);
                pstmt.executeUpdate();
            }

            // Finally, delete from base Treatments table
            String treatSql = "DELETE FROM Treatments WHERE treatment_id = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(treatSql)) {
                pstmt.setInt(1, treatmentId);
                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    conn.commit();
                    return true;
                } else {
                    conn.rollback();
                    return false;
                }
            }

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (SQLException rollbackEx) {
                System.err.println("Error during rollback: " + rollbackEx.getMessage());
            }

            System.err.println("Error deleting treatment: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException autoCommitEx) {
                System.err.println("Error resetting auto-commit: " + autoCommitEx.getMessage());
            }
        }
    }
}
</file>

<file path="src/GUI/CreateAppointmentDialog.java">
package GUI;

import DAO.AppointmentDAO;
import DAO.UserDAO;
import Library.Appointment;
import Library.Doctor;
import Library.Nurse;
import Library.Patient;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class CreateAppointmentDialog extends JDialog {
    public CreateAppointmentDialog(JFrame parent, Nurse nurse) {
        super(parent, "Create Appointment", true);
        setSize(400, 300);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(4, 2));
        JTextField dateField = new JTextField();
        JTextField patientSsnField = new JTextField();
        JTextField doctorSsnField = new JTextField();

        panel.add(new JLabel("Date (YYYY-MM-DD):"));
        panel.add(dateField);
        panel.add(new JLabel("Patient SSN:"));
        panel.add(patientSsnField);
        panel.add(new JLabel("Doctor SSN:"));
        panel.add(doctorSsnField);

        JButton submitBtn = new JButton("Create");
        add(panel, BorderLayout.CENTER);
        add(submitBtn, BorderLayout.SOUTH);

        submitBtn.addActionListener((ActionEvent e) -> {
            String date = dateField.getText();
            String pssn = patientSsnField.getText();
            String dssn = doctorSsnField.getText();

            Patient patient = (Patient) new UserDAO().getUserBySSN(pssn);
            Doctor doctor = (Doctor) new UserDAO().getUserBySSN(dssn);
            if (patient == null || doctor == null) {
                JOptionPane.showMessageDialog(this, "Doctor or patient not found");
                return;
            }

            Appointment appointment = new Appointment(date, doctor, patient);
            boolean success = new AppointmentDAO().createAppointment(appointment);
            if (success) {
                JOptionPane.showMessageDialog(this, "Appointment created successfully");
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to create appointment");
            }
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/CreateOperationDialog.java">
package GUI;

import DAO.UserDAO;
import DAO.TreatmentDAO;
import Library.Doctor;
import Library.Patient;
import Library.Operation;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class CreateOperationDialog extends JDialog {
    public CreateOperationDialog(JFrame parent, Doctor doctor) {
        super(parent, "Create Operation", true);
        setSize(400, 300);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(4, 2));
        JTextField ssnField = new JTextField();
        JTextField startField = new JTextField();
        JTextField endField = new JTextField();
        JTextField nameField = new JTextField();

        panel.add(new JLabel("Patient SSN:")); panel.add(ssnField);
        panel.add(new JLabel("Start Date:")); panel.add(startField);
        panel.add(new JLabel("End Date:")); panel.add(endField);
        panel.add(new JLabel("Operation Name:")); panel.add(nameField);

        JButton createBtn = new JButton("Create");
        add(panel, BorderLayout.CENTER);
        add(createBtn, BorderLayout.SOUTH);

        createBtn.addActionListener((ActionEvent e) -> {
            try {
                String ssn = ssnField.getText().trim();
                Patient patient = (Patient) new UserDAO().getUserBySSN(ssn);
                if (patient == null) {
                    JOptionPane.showMessageDialog(this, "Patient not found."); return;
                }
                String start = startField.getText().trim();
                String end = endField.getText().trim();
                String name = nameField.getText().trim();

                Operation op = new Operation(start, end, name);
                boolean success = new TreatmentDAO().createOperation(op, ssn);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Created."); dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/CreatePrescriptionDialog.java">
package GUI;

import DAO.UserDAO;
import DAO.TreatmentDAO;
import Library.Doctor;
import Library.Patient;
import Library.Prescription;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class CreatePrescriptionDialog extends JDialog {
    public CreatePrescriptionDialog(JFrame parent, Doctor doctor) {
        super(parent, "Create Prescription", true);
        setSize(400, 400);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(6, 2));
        JTextField ssnField = new JTextField();
        JTextField startField = new JTextField();
        JTextField endField = new JTextField();
        JTextField idField = new JTextField();
        JTextField medsField = new JTextField();
        JTextField dosesField = new JTextField();

        panel.add(new JLabel("Patient SSN:")); panel.add(ssnField);
        panel.add(new JLabel("Start Date:")); panel.add(startField);
        panel.add(new JLabel("End Date:")); panel.add(endField);
        panel.add(new JLabel("Prescription ID:")); panel.add(idField);
        panel.add(new JLabel("Medications (comma):")); panel.add(medsField);
        panel.add(new JLabel("Dosages (comma):")); panel.add(dosesField);

        JButton createBtn = new JButton("Create");
        add(panel, BorderLayout.CENTER);
        add(createBtn, BorderLayout.SOUTH);

        createBtn.addActionListener((ActionEvent e) -> {
            try {
                String ssn = ssnField.getText().trim();
                Patient patient = (Patient) new UserDAO().getUserBySSN(ssn);
                if (patient == null) {
                    JOptionPane.showMessageDialog(this, "Patient not found."); return;
                }
                String start = startField.getText().trim();
                String end = endField.getText().trim();
                double pid = Double.parseDouble(idField.getText().trim());

                String[] meds = medsField.getText().split(",");
                String[] doses = dosesField.getText().split(",");

                if (meds.length != doses.length) {
                    JOptionPane.showMessageDialog(this, "Mismatch in meds/doses count."); return;
                }

                ArrayList<String> m = new ArrayList<>();
                ArrayList<String> d = new ArrayList<>();
                for (int i = 0; i < meds.length; i++) {
                    m.add(meds[i].trim());
                    d.add(doses[i].trim());
                }

                Prescription p = new Prescription(start, end, pid, m, d);
                boolean success = new TreatmentDAO().createPrescription(p, ssn);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Created."); dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/DeleteAppointmentDialog.java">
package GUI;

import DAO.AppointmentDAO;
import Library.Nurse;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class DeleteAppointmentDialog extends JDialog {
    public DeleteAppointmentDialog(JFrame parent, Nurse nurse) {
        super(parent, "Delete Appointment", true);
        setSize(300, 150);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(2, 2));
        JTextField idField = new JTextField();

        panel.add(new JLabel("Appointment Index (Row Number):"));
        panel.add(idField);

        JButton deleteBtn = new JButton("Delete");
        add(panel, BorderLayout.CENTER);
        add(deleteBtn, BorderLayout.SOUTH);

        deleteBtn.addActionListener((ActionEvent e) -> {
            try {
                int id = Integer.parseInt(idField.getText());
                boolean success = new AppointmentDAO().deleteAppointment(id);
                JOptionPane.showMessageDialog(this, success ? "Deleted" : "Not Found");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input");
            }
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/DoctorWindow.java">
package GUI;

import DAO.AppointmentDAO;
import DAO.TreatmentDAO;
import DAO.UserDAO;
import Library.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;

public class DoctorWindow extends JFrame {
    private final Doctor doctor;
    private final UserDAO userDAO = new UserDAO();
    private final AppointmentDAO appointmentDAO = new AppointmentDAO();
    private final TreatmentDAO treatmentDAO = new TreatmentDAO();

    private JTable table;
    private JTextArea detailArea;

    public DoctorWindow(Doctor doctor) {
        this.doctor = doctor;

        setTitle("Doctor Panel - " + doctor.getUserName());
        setSize(1000, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JTabbedPane tabbedPane = new JTabbedPane();

        // Profile Tab
        JPanel profileTab = new JPanel(new GridLayout(6, 2));
        profileTab.add(new JLabel("Name:")); profileTab.add(new JLabel(doctor.getUserName()));
        profileTab.add(new JLabel("Surname:")); profileTab.add(new JLabel(doctor.getUserSurname()));
        profileTab.add(new JLabel("Email:")); profileTab.add(new JLabel(doctor.getE_mail()));
        profileTab.add(new JLabel("Phone:")); profileTab.add(new JLabel(doctor.getPhone()));
        profileTab.add(new JLabel("Role:")); profileTab.add(new JLabel(doctor.getUserRole()));
        profileTab.add(new JLabel("SSN:")); profileTab.add(new JLabel(doctor.getSsn()));
        tabbedPane.addTab("Profile", profileTab);

        // Work Area Tab
        JPanel workPanel = new JPanel(new BorderLayout());

        // Buton Paneli
        JPanel topPanel = new JPanel();
        JButton viewPatientsBtn = new JButton("View Patients");
        JButton viewAppointmentsBtn = new JButton("View My Appointments");
        JButton viewPrescriptionsBtn = new JButton("View Prescriptions");
        JButton viewOperationsBtn = new JButton("View Operations");
        topPanel.add(viewPatientsBtn);
        topPanel.add(viewAppointmentsBtn);
        topPanel.add(viewPrescriptionsBtn);
        topPanel.add(viewOperationsBtn);

        // Tablo
        table = new JTable();
        JScrollPane tableScroll = new JScrollPane(table);

        // Sağ panel - detay
        detailArea = new JTextArea(10, 25);
        detailArea.setEditable(false);
        JScrollPane detailScroll = new JScrollPane(detailArea);

        // Alt butonlar
        JPanel bottomPanel = new JPanel();
        JButton createPrescriptionBtn = new JButton("Create Prescription");
        JButton createOperationBtn = new JButton("Create Operation");
        bottomPanel.add(createPrescriptionBtn);
        bottomPanel.add(createOperationBtn);

        workPanel.add(topPanel, BorderLayout.NORTH);
        workPanel.add(tableScroll, BorderLayout.CENTER);
        workPanel.add(detailScroll, BorderLayout.EAST);
        workPanel.add(bottomPanel, BorderLayout.SOUTH);

        tabbedPane.addTab("Workspace", workPanel);

        add(tabbedPane);

        // Action Listeners
        viewPatientsBtn.addActionListener(e -> showPatients());
        viewAppointmentsBtn.addActionListener(e -> showAppointments());
        viewPrescriptionsBtn.addActionListener(e -> showPrescriptions());
        viewOperationsBtn.addActionListener(e -> showOperations());

        createPrescriptionBtn.addActionListener(e -> new CreatePrescriptionDialog(this, doctor));
        createOperationBtn.addActionListener(e -> new CreateOperationDialog(this, doctor));

        setVisible(true);
    }

    private void showPatients() {
        ArrayList<Patient> patients = new ArrayList<>();
        for (User user : userDAO.getUsersByRole("Patient")) {
            if (user instanceof Patient p) {
                patients.add(p);
            }
        }

        String[] cols = {"SSN", "Name", "Email"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Patient p : patients) {
            model.addRow(new Object[]{
                    p.getSsn(),
                    p.getUserName() + " " + p.getUserSurname(),
                    p.getE_mail()
            });
        }

        table.setModel(model);
        detailArea.setText("Patients listed.");
    }

    private void showAppointments() {
        ArrayList<Appointment> appointments = appointmentDAO.getAppointmentsByDoctor(doctor.getSsn());

        String[] cols = {"Date", "Patient SSN", "Patient Name"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Appointment a : appointments) {
            model.addRow(new Object[]{
                    a.getDate(),
                    a.getPatient().getSsn(),
                    a.getPatient().getUserName() + " " + a.getPatient().getUserSurname()
            });
        }

        table.setModel(model);
        detailArea.setText("Appointments listed.");
    }

    private void showPrescriptions() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select a patient from the table.");
            return;
        }

        String ssn = table.getValueAt(row, 0).toString();
        ArrayList<Prescription> prescriptions = treatmentDAO.getPrescriptionsByPatient(ssn);

        StringBuilder sb = new StringBuilder("Prescriptions:\n");
        for (Prescription p : prescriptions) {
            sb.append("ID: ").append(p.getPrescriptionID())
                    .append(", Start: ").append(p.getStartDate())
                    .append(", Meds: ").append(p.getMedication().size())
                    .append("\n");
        }

        detailArea.setText(sb.toString());
    }

    private void showOperations() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select a patient from the table.");
            return;
        }

        String ssn = table.getValueAt(row, 0).toString();
        ArrayList<Operation> operations = treatmentDAO.getOperationsByPatient(ssn);

        StringBuilder sb = new StringBuilder("Operations:\n");
        for (Operation o : operations) {
            sb.append(o.getOperationName())
                    .append(" (").append(o.getStartDate())
                    .append(" - ").append(o.getEndDate()).append(")\n");
        }

        detailArea.setText(sb.toString());
    }
}
</file>

<file path="src/GUI/NurseWindow.java">
package GUI;

import DAO.AppointmentDAO;
import DAO.UserDAO;
import Library.Appointment;
import Library.Nurse;
import Library.Patient;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;

public class NurseWindow extends JFrame {
    private final Nurse nurse;
    private final UserDAO userDAO = new UserDAO();
    private final AppointmentDAO appointmentDAO = new AppointmentDAO();

    private JTable table;
    private JTextArea detailArea;
    private JTextField searchField;

    private enum ViewMode { NONE, APPOINTMENTS, PATIENTS }
    private ViewMode currentView = ViewMode.NONE;

    public NurseWindow(Nurse nurse) {
        this.nurse = nurse;

        setTitle("Nurse Panel - " + nurse.getUserName());
        setSize(1000, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JTabbedPane tabbedPane = new JTabbedPane();

        // Profile tab
        JPanel profileTab = new JPanel(new GridLayout(6, 2));
        profileTab.add(new JLabel("Name:")); profileTab.add(new JLabel(nurse.getUserName()));
        profileTab.add(new JLabel("Surname:")); profileTab.add(new JLabel(nurse.getUserSurname()));
        profileTab.add(new JLabel("Email:")); profileTab.add(new JLabel(nurse.getE_mail()));
        profileTab.add(new JLabel("Phone:")); profileTab.add(new JLabel(nurse.getPhone()));
        profileTab.add(new JLabel("Role:")); profileTab.add(new JLabel(nurse.getUserRole()));
        profileTab.add(new JLabel("SSN:")); profileTab.add(new JLabel(nurse.getSsn()));

        tabbedPane.addTab("Profile", profileTab);

        // Workspace tab
        JPanel workPanel = new JPanel(new BorderLayout());

        // Top panel
        JPanel topPanel = new JPanel(new FlowLayout());
        JButton viewAllAppointmentsBtn = new JButton("View All Appointments");
        JButton viewPatientsBtn = new JButton("View Patients");
        JButton sendEmailBtn = new JButton("Send Email");

        searchField = new JTextField(15);
        JButton searchBtn = new JButton("Search Patient");

        topPanel.add(viewAllAppointmentsBtn);
        topPanel.add(viewPatientsBtn);
        topPanel.add(sendEmailBtn);
        topPanel.add(searchField);
        topPanel.add(searchBtn);

        // Table center
        table = new JTable();
        JScrollPane tableScroll = new JScrollPane(table);

        // Detail area right
        detailArea = new JTextArea(10, 25);
        detailArea.setEditable(false);
        JScrollPane detailScroll = new JScrollPane(detailArea);

        // Bottom panel
        JPanel bottomPanel = new JPanel();
        JButton createAppointmentBtn = new JButton("Create Appointment");
        JButton rescheduleAppointmentBtn = new JButton("Reschedule Appointment");
        JButton deleteAppointmentBtn = new JButton("Delete Appointment");
        JButton registerPatientBtn = new JButton("Register New Patient");

        bottomPanel.add(createAppointmentBtn);
        bottomPanel.add(rescheduleAppointmentBtn);
        bottomPanel.add(deleteAppointmentBtn);
        bottomPanel.add(registerPatientBtn);

        workPanel.add(topPanel, BorderLayout.NORTH);
        workPanel.add(tableScroll, BorderLayout.CENTER);
        workPanel.add(detailScroll, BorderLayout.EAST);
        workPanel.add(bottomPanel, BorderLayout.SOUTH);

        tabbedPane.addTab("Workspace", workPanel);
        add(tabbedPane);

        // Button actions
        viewAllAppointmentsBtn.addActionListener(e -> refreshAppointmentsTable());
        viewPatientsBtn.addActionListener(e -> refreshPatientsTable());
        sendEmailBtn.addActionListener(e -> sendEmailToPatient());

        createAppointmentBtn.addActionListener(e -> {
            new CreateAppointmentDialog(this, nurse);
            refresh();
        });

        rescheduleAppointmentBtn.addActionListener(e -> {
            new RescheduleAppointmentDialog(this, nurse);
            refresh();
        });

        deleteAppointmentBtn.addActionListener(e -> {
            new DeleteAppointmentDialog(this, nurse);
            refresh();
        });

        registerPatientBtn.addActionListener(e -> {
            new RegisterPatientDialog(this, nurse);
            refresh();
        });

        searchBtn.addActionListener(e -> searchPatientsByKeyword());

        setVisible(true);
    }

    private void refreshAppointmentsTable() {
        ArrayList<Appointment> appointments = appointmentDAO.getAllAppointments();

        String[] cols = {"Date", "Patient Name", "Doctor Name"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Appointment a : appointments) {
            model.addRow(new Object[]{
                    a.getDate(),
                    a.getPatient().getUserName() + " " + a.getPatient().getUserSurname(),
                    a.getDoctor().getUserName() + " " + a.getDoctor().getUserSurname()
            });
        }

        table.setModel(model);
        detailArea.setText("All appointments listed.");
        currentView = ViewMode.APPOINTMENTS;
    }

    private void refreshPatientsTable() {
        ArrayList<Patient> patients = new ArrayList<>();
        for (var user : userDAO.getUsersByRole("Patient")) {
            if (user instanceof Patient p) {
                patients.add(p);
            }
        }

        String[] cols = {"SSN", "Name", "Email"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Patient p : patients) {
            model.addRow(new Object[]{
                    p.getSsn(),
                    p.getUserName() + " " + p.getUserSurname(),
                    p.getE_mail()
            });
        }

        table.setModel(model);
        detailArea.setText("Patients listed.");
        currentView = ViewMode.PATIENTS;
    }

    private void refresh() {
        switch (currentView) {
            case APPOINTMENTS -> refreshAppointmentsTable();
            case PATIENTS -> refreshPatientsTable();
            default -> table.setModel(new DefaultTableModel());
        }
    }

    private void sendEmailToPatient() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select a row with appointment info.");
            return;
        }

        String email = JOptionPane.showInputDialog(this, "Enter patient's email to notify:");

        if (email != null && !email.isBlank()) {
            ArrayList<Appointment> appointments = appointmentDAO.getAllAppointments();
            if (row < appointments.size()) {
                Appointment selected = appointments.get(row);
                nurse.sendEmail(email, selected);
                detailArea.setText("Email sent to: " + email);
            } else {
                JOptionPane.showMessageDialog(this, "Appointment selection mismatch.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid email.");
        }
    }

    private void searchPatientsByKeyword() {
        String keyword = searchField.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a keyword.");
            return;
        }

        ArrayList<Patient> patients = userDAO.searchPatients(keyword);
        String[] cols = {"SSN", "Name", "Email"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Patient p : patients) {
            model.addRow(new Object[]{
                    p.getSsn(),
                    p.getUserName() + " " + p.getUserSurname(),
                    p.getE_mail()
            });
        }

        table.setModel(model);
        detailArea.setText("Search results for: " + keyword);
        currentView = ViewMode.PATIENTS;
    }
}
</file>

<file path="src/GUI/PatientWindow.java">
package GUI;

import DAO.UserDAO;
import Library.User;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;

public class PatientWindow extends JFrame {

    private final UserDAO userDAO = new UserDAO();
    private JTable patientTable;
    private DefaultTableModel tableModel;
    private JTextField searchField;

    public PatientWindow() {
        setTitle("Patient List");
        setSize(800, 500);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        initComponents();
        layoutComponents();
        refreshPatientTable();
    }

    private void initComponents() {
        tableModel = new DefaultTableModel(
                new Object[]{"SSN", "Name", "Surname", "Email", "Phone"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        patientTable = new JTable(tableModel);
        patientTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        searchField = new JTextField(20);
    }

    private void layoutComponents() {
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        // Search panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchField);

        JButton searchButton = new JButton("Search");
        searchButton.addActionListener(e -> searchPatients());
        searchPanel.add(searchButton);

        // Table
        JScrollPane scrollPane = new JScrollPane(patientTable);

        mainPanel.add(searchPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        add(mainPanel);
    }

    private void refreshPatientTable() {
        tableModel.setRowCount(0);
        ArrayList<User> patients = userDAO.getUsersByRole("Patient");

        for (User patient : patients) {
            tableModel.addRow(new Object[]{
                    patient.getSsn(),
                    patient.getUserName(),
                    patient.getUserSurname(),
                    patient.getE_mail(),
                    patient.getPhone()
            });
        }
    }

    private void searchPatients() {
        String searchTerm = searchField.getText().trim().toLowerCase();

        if (searchTerm.isEmpty()) {
            refreshPatientTable();
            return;
        }

        tableModel.setRowCount(0);
        ArrayList<User> patients = userDAO.getUsersByRole("Patient");

        for (User patient : patients) {
            if (patient.getSsn().toLowerCase().contains(searchTerm) ||
                patient.getUserName().toLowerCase().contains(searchTerm) ||
                patient.getUserSurname().toLowerCase().contains(searchTerm) ||
                (patient.getE_mail() != null && patient.getE_mail().toLowerCase().contains(searchTerm)) ||
                (patient.getPhone() != null && patient.getPhone().toLowerCase().contains(searchTerm))) {

                tableModel.addRow(new Object[]{
                        patient.getSsn(),
                        patient.getUserName(),
                        patient.getUserSurname(),
                        patient.getE_mail(),
                        patient.getPhone()
                });
            }
        }
    }
}
</file>

<file path="src/GUI/RegisterPatientDialog.java">
package GUI;

import Library.Nurse;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class RegisterPatientDialog extends JDialog {
    public RegisterPatientDialog(JFrame parent, Nurse nurse) {
        super(parent, "Register Patient", true);
        setSize(400, 300);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(6, 2));
        JTextField ssnField = new JTextField();
        JTextField nameField = new JTextField();
        JTextField surnameField = new JTextField();
        JTextField emailField = new JTextField();
        JTextField phoneField = new JTextField();

        panel.add(new JLabel("SSN:"));
        panel.add(ssnField);
        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Surname:"));
        panel.add(surnameField);
        panel.add(new JLabel("Email:"));
        panel.add(emailField);
        panel.add(new JLabel("Phone:"));
        panel.add(phoneField);

        JButton submitBtn = new JButton("Register");
        add(panel, BorderLayout.CENTER);
        add(submitBtn, BorderLayout.SOUTH);

        submitBtn.addActionListener((ActionEvent e) -> {
            nurse.recordPatient(
                    ssnField.getText(),
                    nameField.getText(),
                    surnameField.getText(),
                    "Patient",
                    emailField.getText(),
                    phoneField.getText()
            );
            JOptionPane.showMessageDialog(this, "Patient registered");
            dispose();
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/RescheduleAppointmentDialog.java">
package GUI;

import DAO.AppointmentDAO;
import Library.Appointment;
import Library.Nurse;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class RescheduleAppointmentDialog extends JDialog {
    public RescheduleAppointmentDialog(JFrame parent, Nurse nurse) {
        super(parent, "Reschedule Appointment", true);
        setSize(400, 200);
        setLocationRelativeTo(parent);

        AppointmentDAO appointmentDAO = new AppointmentDAO();
        ArrayList<Appointment> appointments = appointmentDAO.getAllAppointments();

        JPanel panel = new JPanel(new GridLayout(3, 2));

        JComboBox<String> appointmentBox = new JComboBox<>();
        for (Appointment a : appointments) {
            String label = "ID: " + a.getAppointmentId() + " | "
                    + a.getDate() + " | "
                    + a.getPatient().getUserName();
            appointmentBox.addItem(label);
        }

        JTextField newDateField = new JTextField("2025-05-20 10:00:00");

        panel.add(new JLabel("Select Appointment:"));
        panel.add(appointmentBox);
        panel.add(new JLabel("New Date (yyyy-MM-dd HH:mm:ss):"));
        panel.add(newDateField);

        JButton updateBtn = new JButton("Reschedule");
        panel.add(new JLabel());  // boşluk
        panel.add(updateBtn);

        add(panel);

        updateBtn.addActionListener(e -> {
            int index = appointmentBox.getSelectedIndex();
            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select an appointment.");
                return;
            }

            Appointment selected = appointments.get(index);
            String newDate = newDateField.getText().trim();

            if (newDate.isBlank()) {
                JOptionPane.showMessageDialog(this, "New date cannot be empty.");
                return;
            }

            boolean success = appointmentDAO.updateAppointmentDate(selected.getAppointmentId(), newDate);
            JOptionPane.showMessageDialog(this,
                    success ? "Appointment rescheduled." : "Failed to reschedule appointment.");

            if (success) dispose();
        });

        setVisible(true);
    }
}
</file>

<file path="src/GUI/SignUpDialog.java">
package GUI;

import DAO.UserDAO;
import Library.Doctor;
import Library.Nurse;
import Library.User;

import javax.swing.*;
import java.awt.*;

public class SignUpDialog extends JDialog {
    public SignUpDialog(JFrame parent) {
        super(parent, "Sign Up", true);
        setSize(400, 400);
        setLocationRelativeTo(parent);

        JPanel panel = new JPanel(new GridLayout(8, 2));

        JTextField ssnField = new JTextField();
        JTextField nameField = new JTextField();
        JTextField surnameField = new JTextField();
        JTextField emailField = new JTextField();
        JTextField phoneField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JComboBox<String> roleBox = new JComboBox<>(new String[]{"Doctor", "Nurse"});

        panel.add(new JLabel("SSN:")); panel.add(ssnField);
        panel.add(new JLabel("Name:")); panel.add(nameField);
        panel.add(new JLabel("Surname:")); panel.add(surnameField);
        panel.add(new JLabel("Email:")); panel.add(emailField);
        panel.add(new JLabel("Phone:")); panel.add(phoneField);
        panel.add(new JLabel("Password:")); panel.add(passwordField);
        panel.add(new JLabel("Role:")); panel.add(roleBox);

        JButton signUpBtn = new JButton("Sign Up");
        add(panel, BorderLayout.CENTER);
        add(signUpBtn, BorderLayout.SOUTH);

        signUpBtn.addActionListener(e -> {
            String role = roleBox.getSelectedItem().toString();
            User user;
            if (role.equals("Doctor")) {
                user = new Doctor(ssnField.getText(), nameField.getText(), surnameField.getText(), role, emailField.getText(), phoneField.getText(), new String(passwordField.getPassword()));
            } else {
                user = new Nurse(ssnField.getText(), nameField.getText(), surnameField.getText(), role, emailField.getText(), phoneField.getText(), new String(passwordField.getPassword()));
            }
            boolean success = new UserDAO().createUser(user);
            JOptionPane.showMessageDialog(this, success ? "User created" : "Failed to create user");
            if (success) dispose();
        });

        setVisible(true);
    }
}
</file>

<file path="src/Library/Operation.java">
package Library;

public class Operation extends Treatment{
    private String operationName;
    public Operation(String startdate,String enddate,String operationName){
        super.setEndDate(enddate);
        super.setStartDate(startdate);
        this.operationName=operationName;
    }

    public String getOperationName() {
        return operationName;
    }

    public void setOperationName(String operationName) {
        this.operationName = operationName;
    }
}
</file>

<file path="src/Library/Patient.java">
package Library;

public class Patient extends User {

    public Patient(String ssn, String userName,String userSurname,
                   String userRole,String e_mail,String phone){

        super(ssn,userName,userSurname,"Patient",e_mail,phone,".");

    }


}
</file>

<file path="src/Library/Prescription.java">
package Library;

import java.util.ArrayList;

public class Prescription extends Treatment{
    private double prescriptionID;
    private ArrayList<String> medicationName;
    private ArrayList<String> dosage;

    public Prescription(String startdate,String enddate,
                        double prescriptionID,ArrayList<String> medicationName,ArrayList<String>dosage){
        super.setEndDate(enddate);
        super.setStartDate(startdate);
        this.prescriptionID=prescriptionID;
        this.medicationName=medicationName;
        this.dosage=dosage;



    }

    public ArrayList<String[]> getMedication() {
        ArrayList<String[]>medication=new ArrayList<>();
        String [] tmp= new String[2];
        for (int i=0;i<medicationName.size();i++){
            tmp[0]= medicationName.get(i);
            tmp[1]=dosage.get(i);
            medication.add(tmp);



        }
        return medication;}

    public double getPrescriptionID() {
        return prescriptionID;
    }
}
</file>

<file path="src/Library/Treatment.java">
package Library;

public class Treatment {
    private String startDate;
    private String endDate;



    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public String getEndDate() {
        return endDate;
    }

    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public void updateTreatment(String endDate,String startDate){
        setStartDate(startDate);
        setEndDate(endDate);
    };
}
</file>

<file path="src/Library/User.java">
package Library;

public class User {
    private String ssn;
    private String userName;
    private String userSurname;
    private String userRole;
    private String e_mail;
    private String phone;
    private String password;
    public User(String ssn, String userName,String userSurname,
                String userRole,String e_mail,String phone,String password){
        this.ssn=ssn;
        this.userName=userName;
        this.userSurname=userSurname;
        this.userRole=userRole;
        this.e_mail=e_mail;
        this.phone=phone;
        this.password=password;


    }
    public String viewProfile(){
        return ssn +","+ userName +","+userSurname+","+userRole+","+e_mail+","+phone+","+password;
    }
    public void modifyPofile(String ssn, String userName,String userSurname,
                             String userRole,String e_mail,String phone,String password){
        setE_mail(e_mail);
        setPassword(password);
        setPhone(phone);
        setUserName(userName);
        setUserRole(userRole);
        setSsn(ssn);
        setUserSurname(userSurname);
    }

    public String getUserSurname() {
        return userSurname;
    }

    public void setUserSurname(String userSurname) {
        this.userSurname = userSurname;
    }

    public String getUserRole() {
        return userRole;
    }

    public void setUserRole(String userRole) {
        this.userRole = userRole;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getSsn() {
        return ssn;
    }

    public void setSsn(String ssn) {
        this.ssn = ssn;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getE_mail() {
        return e_mail;
    }

    public void setE_mail(String e_mail) {
        this.e_mail = e_mail;
    }
}
</file>

<file path="database.sql">
-- Users table
CREATE TABLE Users (
                       ssn VARCHAR(20) PRIMARY KEY,
                       userName VARCHAR(50) NOT NULL,
                       userSurname VARCHAR(50) NOT NULL,
                       userRole VARCHAR(20) NOT NULL CHECK (userRole IN ('Doctor', 'Nurse', 'Patient')),
                       e_mail VARCHAR(100),
                       phone VARCHAR(20),
                       password VARCHAR(100) NOT NULL
);

-- Patients table
CREATE TABLE Patients (
                          ssn VARCHAR(20) PRIMARY KEY,
                          FOREIGN KEY (ssn) REFERENCES Users(ssn)
);

-- Doctors table
CREATE TABLE Doctors (
                         ssn VARCHAR(20) PRIMARY KEY,
                         specialization VARCHAR(100),
                         FOREIGN KEY (ssn) REFERENCES Users(ssn)
);

-- Nurses table
CREATE TABLE Nurses (
                        ssn VARCHAR(20) PRIMARY KEY,
                        department VARCHAR(100),
                        FOREIGN KEY (ssn) REFERENCES Users(ssn)
);

-- Appointments table
CREATE TABLE Appointments (
                              appointment_id SERIAL PRIMARY KEY,
                              date TIMESTAMP NOT NULL,
                              doctor_ssn VARCHAR(20) NOT NULL,
                              patient_ssn VARCHAR(20) NOT NULL,
                              FOREIGN KEY (doctor_ssn) REFERENCES Doctors(ssn),
                              FOREIGN KEY (patient_ssn) REFERENCES Patients(ssn)
);

-- Treatments table
CREATE TABLE Treatments (
                            treatment_id SERIAL PRIMARY KEY,
                            startDate DATE NOT NULL,
                            endDate DATE,
                            treatment_type VARCHAR(20) NOT NULL CHECK (treatment_type IN ('Operation', 'Prescription'))
);

-- Operations table
CREATE TABLE Operations (
                            treatment_id INTEGER PRIMARY KEY,
                            operationName VARCHAR(100) NOT NULL,
                            FOREIGN KEY (treatment_id) REFERENCES Treatments(treatment_id)
);

-- Prescriptions table
CREATE TABLE Prescriptions (
                               treatment_id INTEGER PRIMARY KEY,
                               prescriptionID DECIMAL(10,2) UNIQUE NOT NULL,
                               FOREIGN KEY (treatment_id) REFERENCES Treatments(treatment_id)
);

-- Medications in prescriptions
CREATE TABLE Medications (
                             medication_id SERIAL PRIMARY KEY,
                             treatment_id INTEGER NOT NULL,
                             medicationName VARCHAR(100) NOT NULL,
                             dosage VARCHAR(50) NOT NULL,
                             FOREIGN KEY (treatment_id) REFERENCES Prescriptions(treatment_id)
);

-- Link patients to treatments
CREATE TABLE PatientTreatments (
                                   patient_ssn VARCHAR(20) NOT NULL,
                                   treatment_id INTEGER NOT NULL,
                                   PRIMARY KEY (patient_ssn, treatment_id),
                                   FOREIGN KEY (patient_ssn) REFERENCES Patients(ssn),
                                   FOREIGN KEY (treatment_id) REFERENCES Treatments(treatment_id)
);
</file>

<file path="docker-compose.yml">
version: '3.8'

services:
  postgres:
    build: .
    container_name: hms_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: hms
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hms2025

volumes:
  pgdata:
</file>

<file path="Dockerfile">
FROM postgres:16

# Set environment variables for PostgreSQL
ENV POSTGRES_DB=hms
ENV POSTGRES_USER=postgres
ENV POSTGRES_PASSWORD=hms2025

# Copy SQL schema to the Docker image's init directory
COPY database.sql /docker-entrypoint-initdb.d/
</file>

<file path="README.md">
# CS320
This repo is trial for CS320
</file>

<file path="src/DAO/AppointmentDAO.java">
package DAO;

import DBConnection.DBConnection;
import Library.Appointment;
import Library.Doctor;
import Library.Patient;

import java.sql.*;
import java.util.ArrayList;

public class AppointmentDAO {

    private UserDAO userDAO = new UserDAO();

    public boolean createAppointment(Appointment appointment) {
        String sql = "INSERT INTO Appointments (date, doctor_ssn, patient_ssn) VALUES (?, ?, ?)";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setTimestamp(1, Timestamp.valueOf(appointment.getDate()));
            pstmt.setString(2, appointment.getDoctor().getSsn());
            pstmt.setString(3, appointment.getPatient().getSsn());

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error creating appointment: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public Appointment getAppointmentById(int appointmentId) {
        String sql = "SELECT * FROM Appointments WHERE appointment_id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, appointmentId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String date = rs.getString("date");
                String doctorSsn = rs.getString("doctor_ssn");
                String patientSsn = rs.getString("patient_ssn");

                Doctor doctor = (Doctor) userDAO.getUserBySSN(doctorSsn);
                Patient patient = (Patient) userDAO.getUserBySSN(patientSsn);

                return new Appointment(appointmentId, date, doctor, patient); // ✅ ID'li constructor
            }

            return null;

        } catch (SQLException e) {
            System.err.println("Error retrieving appointment: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    public ArrayList<Appointment> getAppointmentsByDoctor(String doctorSsn) {
        ArrayList<Appointment> appointments = new ArrayList<>();
        String sql = "SELECT * FROM Appointments WHERE doctor_ssn = ? ORDER BY date";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, doctorSsn);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("appointment_id"); // ✅ sadece eklendi
                String date = rs.getString("date");
                String patientSsn = rs.getString("patient_ssn");

                Doctor doctor = (Doctor) userDAO.getUserBySSN(doctorSsn);
                Patient patient = (Patient) userDAO.getUserBySSN(patientSsn);

                appointments.add(new Appointment(id, date, doctor, patient)); // ✅ ID'li versiyon
            }

            return appointments;

        } catch (SQLException e) {
            System.err.println("Error retrieving doctor's appointments: " + e.getMessage());
            e.printStackTrace();
            return appointments;
        }
    }

    public ArrayList<Appointment> getAppointmentsByPatient(String patientSsn) {
        ArrayList<Appointment> appointments = new ArrayList<>();
        String sql = "SELECT * FROM Appointments WHERE patient_ssn = ? ORDER BY date";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, patientSsn);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("appointment_id"); // ✅ sadece eklendi
                String date = rs.getString("date");
                String doctorSsn = rs.getString("doctor_ssn");

                Doctor doctor = (Doctor) userDAO.getUserBySSN(doctorSsn);
                Patient patient = (Patient) userDAO.getUserBySSN(patientSsn);

                appointments.add(new Appointment(id, date, doctor, patient)); // ✅ ID'li versiyon
            }

            return appointments;

        } catch (SQLException e) {
            System.err.println("Error retrieving patient's appointments: " + e.getMessage());
            e.printStackTrace();
            return appointments;
        }
    }

    public boolean updateAppointmentDate(int appointmentId, String newDate) {
        String sql = "UPDATE Appointments SET date = ? WHERE appointment_id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setTimestamp(1, Timestamp.valueOf(newDate));
            pstmt.setInt(2, appointmentId);

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error updating appointment date: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public boolean deleteAppointment(int appointmentId) {
        String sql = "DELETE FROM Appointments WHERE appointment_id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, appointmentId);

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error deleting appointment: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public ArrayList<Appointment> getAllAppointments() {
        ArrayList<Appointment> appointments = new ArrayList<>();
        String sql = "SELECT * FROM Appointments ORDER BY date";

        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                int id = rs.getInt("appointment_id"); // ✅ sadece eklendi
                String date = rs.getString("date");
                String doctorSsn = rs.getString("doctor_ssn");
                String patientSsn = rs.getString("patient_ssn");

                Doctor doctor = (Doctor) userDAO.getUserBySSN(doctorSsn);
                Patient patient = (Patient) userDAO.getUserBySSN(patientSsn);

                appointments.add(new Appointment(id, date, doctor, patient)); // ✅ ID'li versiyon
            }

            return appointments;

        } catch (SQLException e) {
            System.err.println("Error retrieving all appointments: " + e.getMessage());
            e.printStackTrace();
            return appointments;
        }
    }
}
</file>

<file path="src/DAO/UserDAO.java">
package DAO;

import DBConnection.DBConnection;
import Library.User;
import Library.Doctor;
import Library.Nurse;
import Library.Patient;

import java.sql.*;
import java.util.ArrayList;

public class UserDAO {

    public boolean createUser(User user) {
        String sql = "INSERT INTO Users (ssn, userName, userSurname, userRole, e_mail, phone, password) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, user.getSsn());
            pstmt.setString(2, user.getUserName());
            pstmt.setString(3, user.getUserSurname());
            pstmt.setString(4, user.getUserRole());
            pstmt.setString(5, user.getE_mail());
            pstmt.setString(6, user.getPhone());
            pstmt.setString(7, HashUtil.sha256(user.getPassword()));

            int rowsAffected = pstmt.executeUpdate();

            // If the user is a doctor or nurse, we need additional entries
            if (rowsAffected > 0) {
                if (user.getUserRole().equals("Doctor")) {
                    String doctorSql = "INSERT INTO Doctors (ssn) VALUES (?)";
                    try (PreparedStatement doctorStmt = conn.prepareStatement(doctorSql)) {
                        doctorStmt.setString(1, user.getSsn());
                        doctorStmt.executeUpdate();
                    }
                } else if (user.getUserRole().equals("Nurse")) {
                    String nurseSql = "INSERT INTO Nurses (ssn) VALUES (?)";
                    try (PreparedStatement nurseStmt = conn.prepareStatement(nurseSql)) {
                        nurseStmt.setString(1, user.getSsn());
                        nurseStmt.executeUpdate();
                    }
                } else if (user.getUserRole().equals("Patient")) {
                    String patientSql = "INSERT INTO Patients (ssn) VALUES (?)";
                    try (PreparedStatement patientStmt = conn.prepareStatement(patientSql)) {
                        patientStmt.setString(1, user.getSsn());
                        patientStmt.executeUpdate();
                    }
                }
            }

            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error creating user: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public User getUserBySSN(String ssn) {
        String sql = "SELECT * FROM Users WHERE ssn = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, ssn);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String userRole = rs.getString("userRole");
                String userName = rs.getString("userName");
                String userSurname = rs.getString("userSurname");
                String email = rs.getString("e_mail");
                String phone = rs.getString("phone");
                String password = rs.getString("password");

                if (userRole.equals("Doctor")) {
                    return new Doctor(ssn, userName, userSurname, userRole, email, phone, password);
                } else if (userRole.equals("Nurse")) {
                    return new Nurse(ssn, userName, userSurname, userRole, email, phone, password);
                } else if (userRole.equals("Patient")) {
                    return new Patient(ssn, userName, userSurname, userRole, email, phone);
                }
            }

            return null;

        } catch (SQLException e) {
            System.err.println("Error retrieving user: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    public boolean updateUser(User user) {
        String sql = "UPDATE Users SET userName = ?, userSurname = ?, userRole = ?, " +
                "e_mail = ?, phone = ?, password = ? WHERE ssn = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, user.getUserName());
            pstmt.setString(2, user.getUserSurname());
            pstmt.setString(3, user.getUserRole());
            pstmt.setString(4, user.getE_mail());
            pstmt.setString(5, user.getPhone());
            pstmt.setString(6, HashUtil.sha256(user.getPassword()));
            pstmt.setString(7, user.getSsn());

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;

        } catch (SQLException e) {
            System.err.println("Error updating user: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public boolean deleteUser(String ssn) {
        User user = getUserBySSN(ssn);
        if (user == null) {
            return false;
        }

        String userRole = user.getUserRole();
        Connection conn = null;

        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false); // Start transaction

            // Delete from role-specific table first
            if (userRole.equals("Doctor")) {
                String doctorSql = "DELETE FROM Doctors WHERE ssn = ?";
                try (PreparedStatement stmt = conn.prepareStatement(doctorSql)) {
                    stmt.setString(1, ssn);
                    stmt.executeUpdate();
                }
            } else if (userRole.equals("Nurse")) {
                String nurseSql = "DELETE FROM Nurses WHERE ssn = ?";
                try (PreparedStatement stmt = conn.prepareStatement(nurseSql)) {
                    stmt.setString(1, ssn);
                    stmt.executeUpdate();
                }
            } else if (userRole.equals("Patient")) {
                String patientSql = "DELETE FROM Patients WHERE ssn = ?";
                try (PreparedStatement stmt = conn.prepareStatement(patientSql)) {
                    stmt.setString(1, ssn);
                    stmt.executeUpdate();
                }
            }

            // Then delete from Users table
            String userSql = "DELETE FROM Users WHERE ssn = ?";
            try (PreparedStatement stmt = conn.prepareStatement(userSql)) {
                stmt.setString(1, ssn);
                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    conn.commit(); // Commit transaction
                    return true;
                } else {
                    conn.rollback(); // Rollback if no rows affected
                    return false;
                }
            }

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Rollback on error
                }
            } catch (SQLException rollbackEx) {
                System.err.println("Error during rollback: " + rollbackEx.getMessage());
            }

            System.err.println("Error deleting user: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Reset auto-commit
                }
            } catch (SQLException autoCommitEx) {
                System.err.println("Error resetting auto-commit: " + autoCommitEx.getMessage());
            }
        }
    }

    public ArrayList<User> getUsersByRole(String role) {
        ArrayList<User> users = new ArrayList<>();
        String sql = "SELECT * FROM Users WHERE userRole = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, role);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String ssn = rs.getString("ssn");
                String userName = rs.getString("userName");
                String userSurname = rs.getString("userSurname");
                String email = rs.getString("e_mail");
                String phone = rs.getString("phone");
                String password = rs.getString("password");

                if (role.equals("Doctor")) {
                    users.add(new Doctor(ssn, userName, userSurname, role, email, phone, password));
                } else if (role.equals("Nurse")) {
                    users.add(new Nurse(ssn, userName, userSurname, role, email, phone, password));
                } else if (role.equals("Patient")) {
                    users.add(new Patient(ssn, userName, userSurname, role, email, phone));
                }
            }

            return users;

        } catch (SQLException e) {
            System.err.println("Error retrieving users by role: " + e.getMessage());
            e.printStackTrace();
            return users;
        }
    }

    public User authenticateUser(String ssn, String password) {
        String sql = "SELECT * FROM Users WHERE ssn = ? AND password = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, ssn);
            pstmt.setString(2, HashUtil.sha256(password));
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String userRole = rs.getString("userRole");
                String userName = rs.getString("userName");
                String userSurname = rs.getString("userSurname");
                String email = rs.getString("e_mail");
                String phone = rs.getString("phone");

                if (userRole.equals("Doctor")) {
                    return new Doctor(ssn, userName, userSurname, userRole, email, phone, password);
                } else if (userRole.equals("Nurse")) {
                    return new Nurse(ssn, userName, userSurname, userRole, email, phone, password);
                } else if (userRole.equals("Patient")) {
                    return new Patient(ssn, userName, userSurname, userRole, email, phone);
                }
            }

            return null;

        } catch (SQLException e) {
            System.err.println("Error authenticating user: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    public ArrayList<Patient> searchPatients(String keyword) {
        ArrayList<Patient> result = new ArrayList<>();
        String sql = "SELECT * FROM Users WHERE userRole = 'Patient' AND " +
                "(ssn ILIKE ? OR userName ILIKE ? OR userSurname ILIKE ?)";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            String likeTerm = "%" + keyword + "%";
            pstmt.setString(1, likeTerm);
            pstmt.setString(2, likeTerm);
            pstmt.setString(3, likeTerm);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                result.add(new Patient(
                        rs.getString("ssn"),
                        rs.getString("userName"),
                        rs.getString("userSurname"),
                        rs.getString("userRole"),
                        rs.getString("e_mail"),
                        rs.getString("phone")
                ));
            }

        } catch (SQLException e) {
            System.err.println("Error searching patients: " + e.getMessage());
        }

        return result;
    }
}
</file>

<file path="src/Library/Appointment.java">
package Library;

public class Appointment {
    private int appointmentId; // ✅ Yeni alan
    private String date;
    private Doctor doctor;
    private Patient patient;

    // ✅ ID'li constructor
    public Appointment(int appointmentId, String date, Doctor doctor, Patient patient) {
        this.appointmentId = appointmentId;
        this.date = date;
        this.doctor = doctor;
        this.patient = patient;
    }

    // ✅ ID'siz eski constructor (geriye dönük uyum için)
    public Appointment(String date, Doctor doctor, Patient patient) {
        this.date = date;
        this.doctor = doctor;
        this.patient = patient;
    }

    // ✅ Getter ve Setter'lar
    public int getAppointmentId() {
        return appointmentId;
    }

    public void setAppointmentId(int appointmentId) {
        this.appointmentId = appointmentId;
    }

    public String getDate() {
        return date;
    }

    public Doctor getDoctor() {
        return doctor;
    }

    public Patient getPatient() {
        return patient;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public void setDoctor(Doctor doctor) {
        this.doctor = doctor;
    }

    public void setPatient(Patient patient) {
        this.patient = patient;
    }
}
</file>

<file path="src/Library/Doctor.java">
package Library;

import DAO.AppointmentDAO;
import DAO.TreatmentDAO;
import DAO.UserDAO;

import java.util.ArrayList;

public class Doctor extends User {
    private AppointmentDAO appointmentDAO = new AppointmentDAO();
    private TreatmentDAO treatmentDAO = new TreatmentDAO();
    private UserDAO userDAO = new UserDAO();

    public Doctor(String ssn, String userName, String userSurname,
                  String userRole, String e_mail, String phone, String password) {
        super(ssn, userName, userSurname, "Doctor", e_mail, phone, password);
    }

    public ArrayList<Patient> viewRecords() {
        ArrayList<User> users = userDAO.getUsersByRole("Patient");
        ArrayList<Patient> patients = new ArrayList<>();

        for (User user : users) {
            if (user instanceof Patient) {
                patients.add((Patient) user);
            }
        }

        return patients;
    }

    public ArrayList<Appointment> viewAppointments() {
        return appointmentDAO.getAppointmentsByDoctor(this.getSsn());
    }

    public Object viewVitals(String type, Patient patient) {
        if (type.equals("Prescription")) {
            return treatmentDAO.getPrescriptionsByPatient(patient.getSsn());
        } else {
            return treatmentDAO.getOperationsByPatient(patient.getSsn());
        }
    }

    public boolean createPrescription(Prescription prescription, Patient patient) {
        return treatmentDAO.createPrescription(prescription, patient.getSsn());
    }

    public boolean createOperation(Operation operation, Patient patient) {
        return treatmentDAO.createOperation(operation, patient.getSsn());
    }

    public boolean updateTreatment(int treatmentId, String startDate, String endDate) {
        return treatmentDAO.updateTreatmentDates(treatmentId, startDate, endDate);
    }
}
</file>

<file path="src/Library/Nurse.java">
package Library;

import DAO.AppointmentDAO;
import DAO.UserDAO;

import java.awt.Desktop;
import java.net.URI;
import java.net.URLEncoder;
import java.util.ArrayList;

public class Nurse extends User {
    private AppointmentDAO appointmentDAO = new AppointmentDAO();
    private UserDAO userDAO = new UserDAO();

    public Nurse(String ssn, String userName, String userSurname,
                 String userRole, String e_mail, String phone, String password) {
        super(ssn, userName, userSurname, "Nurse", e_mail, phone, password);
    }

    public void sendEmail(String e_mail, Appointment appointment) {
        try {
            String subject = "Appointment Confirmation";
            String body = "Dear Patient,\n\n" +
                    "Your appointment is confirmed for " + appointment.getDate() +
                    " with Dr. " + appointment.getDoctor().getUserName() + ".\n\n" +
                    "Best regards,\nClinic Team";

            String uriStr = String.format("mailto:%s?subject=%s&body=%s",
                    e_mail,
                    URLEncoder.encode(subject, "UTF-8"),
                    URLEncoder.encode(body, "UTF-8")
            );

            URI mailto = new URI(uriStr);

            if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.MAIL)) {
                Desktop.getDesktop().mail(mailto);
            } else {
                System.err.println("Desktop mail feature is not supported.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public ArrayList<Appointment> viewAppointments(Patient patient) {
        return appointmentDAO.getAppointmentsByPatient(patient.getSsn());
    }

    public void rescheduleAppointment(Appointment appointment, String date) {
        // Get all appointments (we need the ID)
        ArrayList<Appointment> appointments = appointmentDAO.getAllAppointments();
        int appointmentId = -1;

        // Find the matching appointment to get its ID
        for (int i = 0; i < appointments.size(); i++) {
            Appointment app = appointments.get(i);
            if (app.getDate().equals(appointment.getDate()) &&
                    app.getDoctor().getSsn().equals(appointment.getDoctor().getSsn()) &&
                    app.getPatient().getSsn().equals(appointment.getPatient().getSsn())) {
                // Found the appointment, now reschedule it
                appointmentDAO.updateAppointmentDate(appointmentId, date);
                appointment.setDate(date); // Update the object too
                break;
            }
        }
    }

    public void recordPatient(String ssn, String userName, String userSurname,
                              String userRole, String e_mail, String phone) {
        Patient patient = new Patient(ssn, userName, userSurname, userRole, e_mail, phone);
        userDAO.createUser(patient);
    }

    public boolean createAppointment(Appointment appointment) {
        return appointmentDAO.createAppointment(appointment);
    }

    public boolean deleteAppointment(int appointmentId) {
        return appointmentDAO.deleteAppointment(appointmentId);
    }

    public ArrayList<Appointment> viewAllAppointments() {
        return appointmentDAO.getAllAppointments();
    }
}
</file>

<file path="src/Main.java">
public class Main {
    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(() -> new GUI.LoginPanel());
    }
}
</file>

<file path="docker.sh">
docker-compose up --build
</file>

<file path="src/DBConnection/DBConnection.java">
package DBConnection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String URL = "jdbc:postgresql://localhost:5432/hms";
    private static final String USER = "postgres";
    private static final String PASSWORD = "hms2025";

    private static Connection connection = null;

    // Bağlantıyı almak için statik metot
    public static Connection getConnection() throws SQLException {
        if (connection == null || connection.isClosed()) {
            try {
                // PostgreSQL JDBC driver'ı yükle
                Class.forName("org.postgresql.Driver");

                // Bağlantıyı kur
                connection = DriverManager.getConnection(URL, USER, PASSWORD);
                System.out.println("Veritabanına başarıyla bağlanıldı.");
            } catch (ClassNotFoundException e) {
                System.err.println("PostgreSQL JDBC Driver bulunamadı.");
                e.printStackTrace();
            } catch (SQLException e) {
                System.err.println("Veritabanına bağlanırken hata oluştu.");
                e.printStackTrace();
            }
        }
        return connection;
    }

    // Bağlantıyı kapatmak için metot
    public static void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Veritabanı bağlantısı kapatıldı.");
            }
        } catch (SQLException e) {
            System.err.println("Bağlantı kapatılırken hata oluştu.");
            e.printStackTrace();
        }
    }
}
</file>

<file path="src/GUI/LoginPanel.java">
package GUI;

import DAO.UserDAO;
import Library.Doctor;
import Library.Nurse;
import Library.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class LoginPanel extends JFrame {
    private JTextField ssnField;
    private JPasswordField passwordField;

    public LoginPanel() {
        setTitle("Hospital Login");
        setSize(350, 250);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        JPanel formPanel = new JPanel(new GridLayout(3, 2));
        formPanel.add(new JLabel("SSN:"));
        ssnField = new JTextField();
        formPanel.add(ssnField);

        formPanel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        formPanel.add(passwordField);

        JButton loginBtn = new JButton("Login");
        JButton signUpBtn = new JButton("Sign Up");
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(loginBtn);
        buttonPanel.add(signUpBtn);

        add(formPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        loginBtn.addActionListener((ActionEvent e) -> {
            String ssn = ssnField.getText().trim();
            String password = new String(passwordField.getPassword());

            UserDAO userDAO = new UserDAO();
            User user = userDAO.authenticateUser(ssn, password);

            if (user == null) {
                JOptionPane.showMessageDialog(this, "Invalid credentials.");
                return;
            }

            if (user instanceof Doctor) {
                dispose();
                new DoctorWindow((Doctor) user);
            } else if (user instanceof Nurse) {
                dispose();
                new NurseWindow((Nurse) user);
            } else {
                JOptionPane.showMessageDialog(this, "Access denied.");
            }
        });

        signUpBtn.addActionListener(e -> new SignUpDialog(this));

        setVisible(true);
    }

    public static void main(String[] args) {
        new LoginPanel();
    }
}
</file>

<file path=".gitignore">
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

*.iml
.idea
out
</file>

</files>
